<div>
  <span class="block mb-2 text-sm font-medium text-white"> Signature </span>
  <div class="flex gap-2">
    <canvas
      class="border border-gray-600 rounded-md bg-gray-700"
      id="drawSignCanvas"
      width="auto"
      height="120"></canvas>
    <img hidden alt="McLovin Sign" id="signImage" height="120" width="auto" />
    <div class="flex flex-col">
      <button type="button" id="sign" class="text-purple-600">Sign</button>
      <button type="button" id="signClear" class="text-purple-600">
        Clear
      </button>
    </div>
  </div>
</div>

<script>
  import { $ } from '@/utils/domSelector'

  const $canvas = $<HTMLCanvasElement>('#drawSignCanvas') as HTMLCanvasElement
  const ctx = $canvas.getContext('2d')!

  const $signButton = $<HTMLButtonElement>('#sign')
  const $signClearButton = $<HTMLButtonElement>('#signClear')
  const $signImage = $<HTMLImageElement>('#signImage')

  // Variables
  let paint = false
  let clickX: number[] = []
  let clickY: number[] = []
  let clickDrag: boolean[] = []

  // Config
  ctx.lineCap = 'round'
  ctx.lineJoin = 'round'
  ctx.strokeStyle = 'black'
  ctx.lineWidth = 1

  // Functions
  function clearCanvas() {
    ctx.clearRect(0, 0, $canvas.width, $canvas.height)
    clickX = []
    clickY = []
    clickDrag = []
  }

  function redraw() {
    for (let i = 0; i < clickX.length; ++i) {
      ctx.beginPath()
      if (clickDrag[i] && i) {
        ctx.moveTo(clickX[i - 1], clickY[i - 1])
      } else {
        ctx.moveTo(clickX[i] - 1, clickY[i])
      }

      ctx.lineTo(clickX[i], clickY[i])
      ctx.stroke()
    }
    ctx.closePath()
  }

  function addClick(x: number, y: number, dragging: boolean) {
    clickX.push(x)
    clickY.push(y)
    clickDrag.push(dragging)
  }

  const clearEventHandler = () => {
    clearCanvas()
    $signImage.src = ''
  }

  const releaseEventHandler = () => {
    paint = false
    redraw()
  }

  const cancelEventHandler = () => {
    paint = false
  }

  const pressEventHandler = (e: MouseEvent | TouchEvent) => {
    let mouseX = (e as TouchEvent).changedTouches
      ? (e as TouchEvent).changedTouches[0].pageX
      : (e as MouseEvent).pageX
    let mouseY = (e as TouchEvent).changedTouches
      ? (e as TouchEvent).changedTouches[0].pageY
      : (e as MouseEvent).pageY
    mouseX -= $canvas.offsetLeft
    mouseY -= $canvas.offsetTop

    paint = true
    addClick(mouseX, mouseY, false)
    redraw()
  }

  const dragEventHandler = (e: MouseEvent | TouchEvent) => {
    let mouseX = (e as TouchEvent).changedTouches
      ? (e as TouchEvent).changedTouches[0].pageX
      : (e as MouseEvent).pageX
    let mouseY = (e as TouchEvent).changedTouches
      ? (e as TouchEvent).changedTouches[0].pageY
      : (e as MouseEvent).pageY
    mouseX -= $canvas.offsetLeft
    mouseY -= $canvas.offsetTop

    if (paint) {
      addClick(mouseX, mouseY, true)
      redraw()
    }

    e.preventDefault()
  }

  // EventListeners
  $canvas.addEventListener('mousedown', pressEventHandler)
  $canvas.addEventListener('mousemove', dragEventHandler)
  $canvas.addEventListener('mouseup', releaseEventHandler)
  $canvas.addEventListener('mouseout', cancelEventHandler)

  $canvas.addEventListener('touchstart', pressEventHandler)
  $canvas.addEventListener('touchmove', dragEventHandler)
  $canvas.addEventListener('touchend', releaseEventHandler)
  $canvas.addEventListener('touchcancel', cancelEventHandler)

  $signClearButton.addEventListener('click', clearEventHandler)

  $signButton.addEventListener('click', () => {
    $signImage.src = $canvas.toDataURL()
  })
</script>
